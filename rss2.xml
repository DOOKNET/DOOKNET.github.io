<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DOOKNET.Blog</title>
    <link>https://DOOKNET.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>但行好事，莫问前程</description>
    <pubDate>Sat, 05 Jan 2019 08:45:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Python学习笔记4</title>
      <link>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</link>
      <guid>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</guid>
      <pubDate>Sat, 05 Jan 2019 08:37:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;python程序设计&quot;&gt;&lt;a href=&quot;#python程序设计&quot; class=&quot;headerlink&quot; title=&quot;python程序设计&quot;&gt;&lt;/a&gt;python程序设计&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;文件的应用——写文件&quot;&gt;&lt;a href=&quot;#文件的应用—
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="python程序设计"><a href="#python程序设计" class="headerlink" title="python程序设计"></a>python程序设计</h1><hr><h2 id="文件的应用——写文件"><a href="#文件的应用——写文件" class="headerlink" title="文件的应用——写文件"></a>文件的应用——写文件</h2><p>将学生的通讯录保存到文件中。</p><blockquote><p>分析：通讯录包括姓名，性别，电话，地址，输入之后，只有存入文件中才能在关机之后仍能保存数据。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;contact.txt&apos;,&apos;w&apos;)</span><br></pre></td></tr></table></figure><hr><h2 id="文件的应用——读文件"><a href="#文件的应用——读文件" class="headerlink" title="文件的应用——读文件"></a>文件的应用——读文件</h2><p>将存入文件的通讯录显示出来。</p><blockquote><p>分析：数据一旦存入文件中，就可以</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="文件的基本概念"><a href="#文件的基本概念" class="headerlink" title="文件的基本概念"></a>文件的基本概念</h2><ul><li>文件所包含的字节，从文件头到文件结束，位置从0开始。</li><li>按文件中数据的组织形式把文件分为两类：<ul><li>文本文件存储的是常规字符串，</li><li>二进制文件</li></ul></li></ul><h3 id="文件的应用——读文件-1"><a href="#文件的应用——读文件-1" class="headerlink" title="文件的应用——读文件"></a>文件的应用——读文件</h3><p>把字符串“a1@中国”写入文件test.txt中，采用GBK编码。显示文件的长度（总字节）。</p><hr><h2 id="文件的打开或创建"><a href="#文件的打开或创建" class="headerlink" title="文件的打开或创建"></a>文件的打开或创建</h2><ul><li>语法：文件变量名=open(文件名,[打开方式[,缓冲区]])</li></ul><h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><h2 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h2><ul><li><p>语法：read()方法，str=f.read([b])</p><p>参数说明：</p><ul><li>f：是读取</li></ul></li></ul><h2 id="文件的应用——读文件-2"><a href="#文件的应用——读文件-2" class="headerlink" title="文件的应用——读文件"></a>文件的应用——读文件</h2><p>在相同目录下创建一个test.txt文件，编辑其内容如下：</p><h2 id="文件的应用——读二进制文件"><a href="#文件的应用——读二进制文件" class="headerlink" title="文件的应用——读二进制文件"></a>文件的应用——读二进制文件</h2><p>读取</p><h2 id="—-1"><a href="#—-1" class="headerlink" title="—"></a>—</h2><h2 id="文件的遍历"><a href="#文件的遍历" class="headerlink" title="文件的遍历"></a>文件的遍历</h2><ul><li>使用in关键字遍历文件中的所有行，方法如下：</li></ul><hr><h2 id="文件的应用——遍历读文件"><a href="#文件的应用——遍历读文件" class="headerlink" title="文件的应用——遍历读文件"></a>文件的应用——遍历读文件</h2><h2 id="—-2"><a href="#—-2" class="headerlink" title="—"></a>—</h2><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li>将函数分组，分别放到不同的文件里，提升代码的可维护性和可重用性。</li><li>使用模块还可以避免函数名和变量名冲突。</li><li>python模块包括内置模块和第三方模块。</li><li>在python中，模块是一个.py文件</li></ul><hr><h2 id="模块的搜索路径"><a href="#模块的搜索路径" class="headerlink" title="模块的搜索路径"></a>模块的搜索路径</h2><hr><h2 id="常用的标准库模块——random"><a href="#常用的标准库模块——random" class="headerlink" title="常用的标准库模块——random"></a>常用的标准库模块——random</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(&quot;共有&quot;,len(sys.argv),&quot;个命令行参数。&quot;);</span><br><span class="line"></span><br><span class="line">for i in range(0,len(sys.argv)):</span><br><span class="line">    print(&quot;第&quot;,i+1,&quot;个参数为：&quot;,sys.argv[i])</span><br></pre></td></tr></table></figure><hr>]]></content:encoded>
      
      <comments>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python学习笔记3</title>
      <link>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</link>
      <guid>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</guid>
      <pubDate>Sat, 05 Jan 2019 08:35:07 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;程序设计中的三种基本结构&quot;&gt;&lt;a href=&quot;#程序设计中的三种基本结构&quot; class=&quot;headerlink&quot; title=&quot;程序设计中的三种基本结构&quot;&gt;&lt;/a&gt;程序设计中的三种基本结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;顺序结构：程序按先后顺序，前一步执行结束之后，才
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="程序设计中的三种基本结构"><a href="#程序设计中的三种基本结构" class="headerlink" title="程序设计中的三种基本结构"></a>程序设计中的三种基本结构</h2><ul><li>顺序结构：程序按先后顺序，前一步执行结束之后，才能执行后一步。</li><li>选择结构：又称分支结构，指程序流程可以分为几条不同的路径执行。</li><li>循环结构：指程序流程重复执行某一项任务。</li></ul><h3 id="理解程序设计中的三种基本结构"><a href="#理解程序设计中的三种基本结构" class="headerlink" title="理解程序设计中的三种基本结构"></a>理解程序设计中的三种基本结构</h3><ul><li>问题：任意输入三个以逗号分割的数字，按大小顺序输出。<blockquote><p>分析：三个数输入后，需要比较两个数字的大小，必要时需要交换两个数字。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 数字比较大小</span><br><span class="line">s = input(&apos;x,y,z = &apos;)</span><br><span class="line">x,y,z = s.split(&apos;,&apos;)    #把字符串用逗号进行分离，返回子串构成的列表</span><br><span class="line">if x&gt;y:</span><br><span class="line">    x,y = y,x    #交换x,y值</span><br><span class="line">if x&gt;z:</span><br><span class="line">    x,z = z,x</span><br><span class="line">if y&gt;z:</span><br><span class="line">    y,z = z,y</span><br><span class="line">print(x,y,z)</span><br></pre></td></tr></table></figure><ul><li>判断输入的数字是否为偶数<blockquote><p>输入一个整数，如果是奇数，输出“奇数”，否则输出“偶数”</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        num=int(input(&apos;输入一个整数：&apos;)) #判断输入是否为整数</span><br><span class="line">    except ValueError: #不是纯数字需要重新输入</span><br><span class="line">        print(&quot;输入的不是整数！&quot;)</span><br><span class="line">        continue</span><br><span class="line">    if num%2==0:</span><br><span class="line">        print(&apos;偶数&apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;奇数&apos;)</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><hr><h2 id="程序设计中的循环结构"><a href="#程序设计中的循环结构" class="headerlink" title="程序设计中的循环结构"></a>程序设计中的循环结构</h2><p>循环结构是一种重复执行的程序结构。</p><ul><li>计算1+2+3…+100，这是一个级数求和问题，需要重复执行100次，对100个数依此进行累加</li><li>假设1个班级中有n名同学，统计男同学和女同学各有多少名</li><li>给定2个整数，求它们的最大公约数和最小公倍数</li></ul><hr><h2 id="while循环结构的定义"><a href="#while循环结构的定义" class="headerlink" title="while循环结构的定义"></a>while循环结构的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 表达式:</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 表达式:</span><br><span class="line">    循环体</span><br><span class="line">else:</span><br><span class="line">    else子句</span><br></pre></td></tr></table></figure><h3 id="读取整形数值到负数结束"><a href="#读取整形数值到负数结束" class="headerlink" title="读取整形数值到负数结束"></a>读取整形数值到负数结束</h3><p>从键盘输入若干正整数，求所有输入整数之和。当输入整数为负数时，结束该操作。</p><blockquote><p>分析：由于不确定用户即将输入几个正整数，因此属于不确定循环次数的问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: cp936 -*-</span><br><span class="line">print(&apos;输入：&apos;)</span><br><span class="line">s = 0</span><br><span class="line">x = input(&quot;请求输入一个整数：&quot;)</span><br><span class="line">while x&gt;=0:</span><br><span class="line">    s = s+x</span><br><span class="line">    x = input(&quot;请求输入一个整数：&quot;)</span><br><span class="line">print&apos;整数之和=&apos;.s</span><br></pre></td></tr></table></figure><h3 id="输出水仙花数"><a href="#输出水仙花数" class="headerlink" title="输出水仙花数"></a>输出水仙花数</h3><p>输出“水仙花数”，所有水仙花数是指1个3位的十进制制数，其各位数字的立方和等于该数本身。例如：153是水仙花数，因为153=1^3+5^3+3^3</p><h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><h2 id="python函数式编程常用函数——reduce"><a href="#python函数式编程常用函数——reduce" class="headerlink" title="python函数式编程常用函数——reduce"></a>python函数式编程常用函数——reduce</h2><ul><li>reduce()函数用于将指定序列中的所有元素作为参数按一定的规则调用制定函数。reduce函数的语法如下：<blockquote><p>计算结果 = reduce(映射函数,序列)</p></blockquote></li></ul><p>映射函数的必须有2个参数。reduce()函数首先以序列的第1和第2个元素为参数调用映射函数，然后将返回结果与序列的第3个元素为参数调用映射函数。以此类推，直至应用到序列的最后一个元素，将计算结果作为reduce()函数的返回结果。</p><h2 id="—-1"><a href="#—-1" class="headerlink" title="—"></a>—</h2><h2 id="使用序列存储数据简化操作"><a href="#使用序列存储数据简化操作" class="headerlink" title="使用序列存储数据简化操作"></a>使用序列存储数据简化操作</h2><ul><li>列表是一种数据结构</li><li>sort()是python中的方法，可以对列表中数据排序</li></ul><hr><h2 id="序列的定义"><a href="#序列的定义" class="headerlink" title="序列的定义"></a>序列的定义</h2><ul><li>序列：一系列按一定顺序排列的数据。</li><li>位置编号，也称“下标”或“索引”，是整数或整数表达式。</li><li>引用元素：序列名[位置编号]，位置编号从0开始。</li><li>序列也可以从尾部访问，最后一个元素是c[-1]。</li></ul><hr><h2 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h2><ul><li>列表是python中内置数据类型，是数据的有序集合，其中，每一个数据称为元素。</li><li>一个列表中的数据类型可以各不相同。</li><li>列表中的其所有元素用逗号分割并放在一队中括号“[”“]”中<ul><li>[10，20，30，40] #所有元素都是整型数据的列表</li><li>[‘crunchy frog’,’ram bladder’,’lark vomit’] #所有元素都是字符串的列表</li><li>[‘spam’,2.0,5[10,20]] #该列表中包含了一个字符串元素、一个浮点类型元素、一个整型元素和一个列表类型元素</li></ul></li></ul><hr><h2 id="列表的创建和读取"><a href="#列表的创建和读取" class="headerlink" title="列表的创建和读取"></a>列表的创建和读取</h2><ul><li>创建列表：使用“=”将一个列表赋值给变量。</li><li>读取元素：用变量名加元素序号（放中括号中）即可访问列表中某个元素，列表的第一个元素序号为0。若一个列表有n个元素，则访问元素的合法序号范围是n~n-1。</li></ul><hr><h2 id="使用列表进行查询"><a href="#使用列表进行查询" class="headerlink" title="使用列表进行查询"></a>使用列表进行查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list=[&apos;a&apos;,&apos;b&apos;,&apos;mpilgrim&apos;,&apos;z&apos;,&apos;example&apos;]</span><br><span class="line">&gt;&gt;&gt; print(a_list[2])</span><br><span class="line">mpilgrim</span><br><span class="line">&gt;&gt;&gt; print(a_list[-1])</span><br><span class="line">example</span><br><span class="line">&gt;&gt;&gt; print(a_list[-5])</span><br><span class="line">a</span><br><span class="line">&gt;&gt;&gt; print(a_list[-7])</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#4&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    print(a_list[-7])</span><br><span class="line">IndexError: list index out of range</span><br><span class="line">&gt;&gt;&gt; print(a_list[5])</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#5&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    print(a_list[5])</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><hr><h2 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h2><ul><li>切片：可以使用列表序号对来截取列表中的任何部分从而得到一个新列表。序号对中第一个序号表示切片截止（但不包含）位置。</li><li>当切片的左索引为0时可缺省，当右索引为列表长度时也可缺省。</li></ul><h3 id="使用字典进行查询"><a href="#使用字典进行查询" class="headerlink" title="使用字典进行查询"></a>使用字典进行查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list=[&apos;a&apos;,&apos;b&apos;,&apos;mpilgrim&apos;,&apos;z&apos;,&apos;example&apos;]</span><br><span class="line">&gt;&gt;&gt; print(a_list[1:3])</span><br><span class="line">[&apos;b&apos;, &apos;mpilgrim&apos;]</span><br><span class="line">&gt;&gt;&gt; print(a_list[1:-1])</span><br><span class="line">[&apos;b&apos;, &apos;mpilgrim&apos;, &apos;z&apos;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(a_list[:3])</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;mpilgrim&apos;]</span><br><span class="line">&gt;&gt;&gt; print(a_list[3:])</span><br><span class="line">[&apos;z&apos;, &apos;example&apos;]</span><br><span class="line">&gt;&gt;&gt; print(a_list[:])</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;mpilgrim&apos;, &apos;z&apos;, &apos;example&apos;]</span><br></pre></td></tr></table></figure><hr><h2 id="列表元素的增加"><a href="#列表元素的增加" class="headerlink" title="列表元素的增加"></a>列表元素的增加</h2><ul><li>使用“+”将一个新列表附加在原列表的尾部</li><li>使用append()方法向列表尾部添加一个新元素</li><li>使用extrnd()方法将一个列表添加在原列表的尾部</li><li>使用insert()方法将一个元素插入到列表的任意位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list = [1]</span><br><span class="line">&gt;&gt;&gt; a_list = a_list + [&apos;a&apos;,2.0]</span><br><span class="line">&gt;&gt;&gt; a_list</span><br><span class="line">[1, &apos;a&apos;, 2.0]</span><br><span class="line">&gt;&gt;&gt; a_list,append(True)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a_list.append(True)</span><br><span class="line">&gt;&gt;&gt; a_list</span><br><span class="line">[1, &apos;a&apos;, 2.0, True]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a_list.extend([&apos;x&apos;,4])</span><br><span class="line">&gt;&gt;&gt; a_list</span><br><span class="line">[1, &apos;a&apos;, 2.0, True, &apos;x&apos;, 4]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a_list.insert(0,&apos;x&apos;)</span><br><span class="line">&gt;&gt;&gt; a_list</span><br><span class="line">[&apos;x&apos;, 1, &apos;a&apos;, 2.0, True, &apos;x&apos;, 4]</span><br></pre></td></tr></table></figure><hr><h2 id="列表元素的检索"><a href="#列表元素的检索" class="headerlink" title="列表元素的检索"></a>列表元素的检索</h2><ul><li>使用count()方法计算列表中某个元素出现的次数</li><li>使用in运算符返回某个元素是否在该列表中</li><li>使用index()方法返回某个元素在列表中的准确位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list=[&apos;x&apos;,1,&apos;a&apos;,2.0,True,&apos;x&apos;,4]</span><br><span class="line">&gt;&gt;&gt; a_list.count(&apos;x&apos;)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 3 in a_list</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 2.0 in a_list</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a_list.index(&apos;x&apos;)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; a_list.index(5)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#17&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    a_list.index(5)</span><br><span class="line">ValueError: 5 is not in list</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="列表元素的删除"><a href="#列表元素的删除" class="headerlink" title="列表元素的删除"></a>列表元素的删除</h2><ul><li>当向列表中添加或删除元素时，列表将自动拓展或收缩，列表中永远不会有缝隙。</li><li>使用del语句删除某个特定位置的元素</li><li>使用remove方法删除某个特定值的元素</li><li>使用pop(参数)方法来弹出（删除）指定位置的元素，缺省参数时弹出最后一个元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list=[&apos;x&apos;,1,&apos;a&apos;,2.0,True,&apos;x&apos;,4]</span><br><span class="line">&gt;&gt;&gt; del a_list[1]</span><br><span class="line">&gt;&gt;&gt; a_list</span><br><span class="line">[&apos;x&apos;, &apos;a&apos;, 2.0, True, &apos;x&apos;, 4]</span><br><span class="line">&gt;&gt;&gt; a_list.remove(&apos;x&apos;)</span><br><span class="line">&gt;&gt;&gt; a_list</span><br><span class="line">[&apos;a&apos;, 2.0, True, &apos;x&apos;, 4]</span><br><span class="line">&gt;&gt;&gt; a_list.remove(&apos;x&apos;)</span><br><span class="line">&gt;&gt;&gt; a_list</span><br><span class="line">[&apos;a&apos;, 2.0, True, 4]</span><br><span class="line">&gt;&gt;&gt; a_list.remove(&apos;x&apos;)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#24&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    a_list.remove(&apos;x&apos;)</span><br><span class="line">ValueError: list.remove(x): x not in list</span><br><span class="line">&gt;&gt;&gt; a_list.pop()</span><br><span class="line">4</span><br></pre></td></tr></table></figure><hr><h2 id="列表中的常用函数"><a href="#列表中的常用函数" class="headerlink" title="列表中的常用函数"></a>列表中的常用函数</h2><ul><li>cmp( )</li></ul><p>格式：cmp(列表1,列表2)</p><p>功能：对两个列表进行比较，若第一个列表大于第二个，则结果为1，相反则为-1，元素完全相同则结果为0。</p><ul><li>len( )</li></ul><p>格式：len(列表)</p><p>功能：返回列表中的元素个数</p><ul><li>max( )和min()</li></ul><p>格式：max(列表)，min(列表)</p><p>功能：返回列表中的最大或最小元素</p><ul><li>sorted()和reversed()</li></ul><p>格式：sorted(列表)，reversed(列表)</p><p>功能：前者的功能是对列表的后面增加一个reverse参数，其等于True则表示按降序排列；后者的功能是对列表进行逆序。</p><ul><li>sum()</li></ul><p>格式：sum()</p><p>功能：对数值型列表的元素进行求和运算，对非数值型列表运算则出错。</p><hr><h2 id="循环输出列表中元素的值"><a href="#循环输出列表中元素的值" class="headerlink" title="循环输出列表中元素的值"></a>循环输出列表中元素的值</h2><p>每循环一次输出一个列表元素值，由于列表定义后，其长度是已知的，因此循环次数也是确定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: cp936 -*-</span><br><span class="line">a_list=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;]</span><br><span class="line">a_len=len(a_list)</span><br><span class="line">i=0</span><br><span class="line">while i&lt;a_len:</span><br><span class="line">    print&apos;列表的第&apos;,i+1,&apos;个元素是：&apos;,a_list[i]</span><br><span class="line">    i +=1</span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line">列表的第 1 个元素是： a</span><br><span class="line">列表的第 2 个元素是： b</span><br><span class="line">列表的第 3 个元素是： c</span><br><span class="line">列表的第 4 个元素是： d</span><br><span class="line">列表的第 5 个元素是： e</span><br></pre></td></tr></table></figure><hr><h2 id="列表中元素排序"><a href="#列表中元素排序" class="headerlink" title="列表中元素排序"></a>列表中元素排序</h2><p>列表Li中有一组单词，把单词分别进行升序排序和降序排序。</p><p>应用列表的排序函数sort()能完成升序排序和降序排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: cp936 -*-</span><br><span class="line">Li=[&apos;apple&apos;,&apos;peach&apos;,&apos;wps&apos;,&apos;word&apos;,&apos;access&apos;,&apos;excel&apos;,&apos;open&apos;,&apos;seek&apos;]</span><br><span class="line">Li2=Li[:]</span><br><span class="line">print Li</span><br><span class="line">Li.sort()   #列表元素按升序排列</span><br><span class="line">print&apos;升序：&apos;</span><br><span class="line">print Li</span><br><span class="line">print Li2</span><br><span class="line">print&apos;降序：&apos;</span><br><span class="line">Li2.sort(reverse=True)  #列表元素按降序排列</span><br><span class="line">print Li2</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">[&apos;apple&apos;, &apos;peach&apos;, &apos;wps&apos;, &apos;word&apos;, &apos;access&apos;, &apos;excel&apos;, &apos;open&apos;, &apos;seek&apos;]</span><br><span class="line">升序：</span><br><span class="line">[&apos;access&apos;, &apos;apple&apos;, &apos;excel&apos;, &apos;open&apos;, &apos;peach&apos;, &apos;seek&apos;, &apos;word&apos;, &apos;wps&apos;]</span><br><span class="line">[&apos;apple&apos;, &apos;peach&apos;, &apos;wps&apos;, &apos;word&apos;, &apos;access&apos;, &apos;excel&apos;, &apos;open&apos;, &apos;seek&apos;]</span><br><span class="line">降序：</span><br><span class="line">[&apos;wps&apos;, &apos;word&apos;, &apos;seek&apos;, &apos;peach&apos;, &apos;open&apos;, &apos;excel&apos;, &apos;apple&apos;, &apos;access&apos;]</span><br></pre></td></tr></table></figure><hr><h2 id="多维列表"><a href="#多维列表" class="headerlink" title="多维列表"></a>多维列表</h2><ul><li>定义一个二维数列表<ul><li>list2=[[“CPU”,”内存”],[“硬盘”,”声卡”]];</li></ul></li><li>读取一个二维列表中的元素<ul><li>列表名[索引1] [索引2]</li></ul></li></ul><h3 id="循环输出列表中元素的值-1"><a href="#循环输出列表中元素的值-1" class="headerlink" title="循环输出列表中元素的值"></a>循环输出列表中元素的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list2=[[&quot;CPU&quot;,&quot;内存&quot;],[&quot;硬盘&quot;,&quot;声卡&quot;]];</span><br><span class="line">for i in range(len(list2)):</span><br><span class="line">    list1=list2[i];</span><br><span class="line">    for j in range(len(list1)):</span><br><span class="line">        print(list1[j])</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">CPU</span><br><span class="line">内存</span><br><span class="line">硬盘</span><br><span class="line">声卡</span><br></pre></td></tr></table></figure><h2 id="—-2"><a href="#—-2" class="headerlink" title="—"></a>—</h2><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul><li>元组和列表类似，但其元素是不可变的，元组一旦创建，用任何方法都不可修改其元素。</li><li>元组的定义方式和列表相同，但定义时所有元素是放在一对圆括号“(”和“)”中，而不是方括号中。</li><li>下面这些都是合法的元组：(10,20,30,40)(‘crunchy frog’,’ram bladder’,’lark vomit’)</li></ul><hr><h2 id="元组的操作"><a href="#元组的操作" class="headerlink" title="元组的操作"></a>元组的操作</h2><ul><li>创建元组：使用“=”将一个元组赋值给变量。</li><li>读取元素</li><li>元组切片</li></ul><h3 id="列表元素的排序"><a href="#列表元素的排序" class="headerlink" title="列表元素的排序"></a>列表元素的排序</h3><hr><h2 id="元组的检索"><a href="#元组的检索" class="headerlink" title="元组的检索"></a>元组的检索</h2><ul><li>检索元素</li></ul><p>使用count( )方法计算元组中某个元素出现的次数</p><hr><h2 id="元组元素的排序"><a href="#元组元素的排序" class="headerlink" title="元组元素的排序"></a>元组元素的排序</h2><hr><h2 id="元组与列表的区别"><a href="#元组与列表的区别" class="headerlink" title="元组与列表的区别"></a>元组与列表的区别</h2><ul><li>元组中的数据一旦定义就不允许更改。因此，元组没有append()或extend()方法，</li></ul><hr><h2 id="利用元组来一次性对多个变量赋值"><a href="#利用元组来一次性对多个变量赋值" class="headerlink" title="利用元组来一次性对多个变量赋值"></a>利用元组来一次性对多个变量赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; v_tuple = (False,3.5,&apos;exp&apos;)</span><br><span class="line">&gt;&gt;&gt; (x,y,z) = v_tuple</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; y</span><br><span class="line">3.5</span><br><span class="line">&gt;&gt;&gt; z</span><br><span class="line">&apos;exp&apos;</span><br></pre></td></tr></table></figure><h2 id="—-3"><a href="#—-3" class="headerlink" title="—"></a>—</h2><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>字典是键值对的无序集合。</li><li>字典中的每个元素包含两部分：键和值。向字典添加一个键的同时，必须为该键增添一个值。</li></ul><hr><h2 id="字典的创建和查找"><a href="#字典的创建和查找" class="headerlink" title="字典的创建和查找"></a>字典的创建和查找</h2><ul><li><p>创建字典</p></li><li><p>字典定义后</p></li><li><p>遍历字典</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a_dict = &#123;&apos;server&apos;:&apos;db.diveintopython3.org&apos;,&apos;database&apos;:&apos;mysql&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; a_dict</span><br><span class="line">&#123;&apos;database&apos;: &apos;mysql&apos;,&apos;server&apos;:&apos;db.diveintopython3.org&apos;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="使用字典进行查询-1"><a href="#使用字典进行查询-1" class="headerlink" title="使用字典进行查询"></a>使用字典进行查询</h2><hr><h2 id="字典的更新"><a href="#字典的更新" class="headerlink" title="字典的更新"></a>字典的更新</h2><ul><li>添加和修改字典<ul><li>字典没有预定义的大小限制。</li><li>可以随时向字典中添加新的键值对，或者修改现有键所关联的值。</li><li>添加和修改的方法相同，都是使用“字典变量名[键名]=键值”的形式，区分究竟是添加还是修改是看键名与字典中现有的键名是否重复，因为字典中不允许有重复的键。如不重复则是添加新键值对，如重复则是将该键对应的值修改为新值。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="字典的其它操作"><a href="#字典的其它操作" class="headerlink" title="字典的其它操作"></a>字典的其它操作</h2><ul><li>字典的长度</li></ul><p>与列表、元组类似，可以用len()函数返回字典中键的数量。</p><ul><li><p>字典检索</p></li><li><p>删除元素和字典</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="列表作为函数参数"><a href="#列表作为函数参数" class="headerlink" title="列表作为函数参数"></a>列表作为函数参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def sum(list):</span><br><span class="line">    total = 0;</span><br><span class="line">    for x in range(len(list)):</span><br><span class="line">        print(list[x],&quot;+&quot;);</span><br><span class="line">        total+=list[x];</span><br><span class="line">    print(&quot;=&quot;,total);</span><br><span class="line">list = [15,25,35,65]</span><br><span class="line">sum(list);</span><br><span class="line"></span><br><span class="line">#运行结果</span><br><span class="line">==========RESTART:E:\Workspace\Python_2.7\2018_8_22_Test\test.py==========</span><br><span class="line">(15, &apos;+&apos;)</span><br><span class="line">(25, &apos;+&apos;)</span><br><span class="line">(35, &apos;+&apos;)</span><br><span class="line">(65, &apos;+&apos;)</span><br><span class="line">(&apos;=&apos;, 140)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def print_dict(dict):</span><br><span class="line">    for(k,v) in dict.items():</span><br><span class="line">        print&quot;dict[%s]=&quot;%k,v</span><br><span class="line">dict = &#123;&quot;a&quot;:&quot;apple&quot;,&quot;b&quot;:&quot;banana&quot;,&quot;g&quot;:&quot;grape&quot;,&quot;o&quot;:&quot;orange&quot;&#125;</span><br><span class="line">print_dict(dict);</span><br><span class="line"></span><br><span class="line">#运行结果</span><br><span class="line">========== RESTART:E:\Workspace\Python_2.7\2018_8_22_Test\test.py==========</span><br><span class="line">dict[a]= apple</span><br><span class="line">dict[b]= banana</span><br><span class="line">dict[o]= orange</span><br><span class="line">dict[g]= grape</span><br></pre></td></tr></table></figure><hr><h2 id="函数中修改列表参数"><a href="#函数中修改列表参数" class="headerlink" title="函数中修改列表参数"></a>函数中修改列表参数</h2><hr><h2 id="函数中修改字典参数"><a href="#函数中修改字典参数" class="headerlink" title="函数中修改字典参数"></a>函数中修改字典参数</h2><hr><h2 id="集合的创建和访问"><a href="#集合的创建和访问" class="headerlink" title="集合的创建和访问"></a>集合的创建和访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="集合元素的增加"><a href="#集合元素的增加" class="headerlink" title="集合元素的增加"></a>集合元素的增加</h2><hr><h2 id="集合元素的删除"><a href="#集合元素的删除" class="headerlink" title="集合元素的删除"></a>集合元素的删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1,2,3])</span><br><span class="line">&gt;&gt;&gt; s.remove(1)</span><br><span class="line">&gt;&gt;&gt; print(s)</span><br><span class="line">set([2, 3])</span><br><span class="line">&gt;&gt;&gt; s.clear()</span><br><span class="line">&gt;&gt;&gt; print(s)</span><br><span class="line">set([])</span><br></pre></td></tr></table></figure><hr><h2 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h2><h3 id="子集和超集"><a href="#子集和超集" class="headerlink" title="子集和超集"></a>子集和超集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="—-4"><a href="#—-4" class="headerlink" title="—"></a>—</h2><h2 id="复杂的数据结构"><a href="#复杂的数据结构" class="headerlink" title="复杂的数据结构"></a>复杂的数据结构</h2><ul><li>在解决实际问题时，还经常需要用到其他复杂的数据结构，如堆、栈、队列、树、图等。</li></ul>]]></content:encoded>
      
      <comments>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python学习笔记2</title>
      <link>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</link>
      <guid>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</guid>
      <pubDate>Sat, 05 Jan 2019 08:33:08 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;IDLE中调试程序&quot;&gt;&lt;a href=&quot;#IDLE中调试程序&quot; class=&quot;headerlink&quot; title=&quot;IDLE中调试程序&quot;&gt;&lt;/a&gt;IDLE中调试程序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用IDLE打开源文件，点击”run module =&amp;gt; debu
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="IDLE中调试程序"><a href="#IDLE中调试程序" class="headerlink" title="IDLE中调试程序"></a>IDLE中调试程序</h2><ul><li>使用IDLE打开源文件，点击”run module =&gt; debug =&gt; debugger”打开调试器窗口。</li><li>切换到调试器窗口进行调试。</li></ul><hr><h2 id="IDLE中调试窗口"><a href="#IDLE中调试窗口" class="headerlink" title="IDLE中调试窗口"></a>IDLE中调试窗口</h2><hr><h2 id="IDLE中的菜单"><a href="#IDLE中的菜单" class="headerlink" title="IDLE中的菜单"></a>IDLE中的菜单</h2><hr><h2 id="python中的文件名"><a href="#python中的文件名" class="headerlink" title="python中的文件名"></a>python中的文件名</h2><ul><li>py：编写python代码时，得到的是一个以.py为扩展名的文本文件。</li><li>.pyo：优化的python字节码文件，同样无法使用文本编辑器直接查看其内容。可以使用“python-o-m py_compile file.py”或“python-oo-m py_compile file.py”进行优化编译。</li><li>.pyd：一般是由其他语言编写并编译的二进制文件，常用于实现某些软件工具的python编程接口插件或python动态链接库。</li></ul><hr><h2 id="python的解释器"><a href="#python的解释器" class="headerlink" title="python的解释器"></a>python的解释器</h2><ul><li>Cpython是安装好python2.7后，获得的官方版本的解释器，是用C语言开发的。</li><li>IPython是基于Cpython的交互式解释器，即，Ipython在交互方式上有所增强，在执行python代码的功能和CPython是完全一样的。</li><li>PyPy采用JIT技术，对python代码进行动态编译（注意不是解释），所有可以显著提高python代码的执行速度。</li><li>Jython是运行在Java平台上的python解释器，可以直接把python代码编译成Java字节码执行。</li><li>IronPython和Jython类似，但是其运行在微软.Net平台上，可以直接把python代码编译成.Net的字节码。</li></ul><hr><h2 id="python脚本中的import"><a href="#python脚本中的import" class="headerlink" title="python脚本中的import"></a>python脚本中的import</h2><ul><li>导入模块：模块为一个文件，可以作为模块的文件类型包括“.py”、“.pyo”、“.pyc”、“.pyd”、“.so”、“.dll”等。</li><li>导入包：包是一个目录，使用import导入包，或者from+import来导入包中的部分模块。包目录下包括文件<em>init</em>.py和模块文件、子目录，如果子目录中也有<em>init</em>.py。那么它就是这个包的子包。</li></ul><h3 id="python脚本中的import的例子"><a href="#python脚本中的import的例子" class="headerlink" title="python脚本中的import的例子"></a>python脚本中的import的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;import math</span><br><span class="line">&gt;&gt;&gt;math.sin(0.5)           #求0.5的正弦</span><br><span class="line">&gt;&gt;&gt;import random</span><br><span class="line">&gt;&gt;&gt;x=random.random()       #获得[0,1)内的随机小数</span><br><span class="line">&gt;&gt;&gt;y=random.random()</span><br><span class="line">&gt;&gt;&gt;n=random.randint(1,100) #获得[1,100]上的随机整数</span><br></pre></td></tr></table></figure><hr><h2 id="python中包管理工具"><a href="#python中包管理工具" class="headerlink" title="python中包管理工具"></a>python中包管理工具</h2><ul><li>easy_install：<ul><li>位于C:\Python27\Scripts</li><li>easy_install pip,开始安装pip</li></ul></li><li>pip：<ul><li>pip是一个安装和管理Python包的工具，方便地下载Python包。</li><li>不仅下载需要的包，而且会下载依赖包。</li><li>pip install包名称</li></ul></li></ul><hr><h2 id="python脚本中的输入和输出"><a href="#python脚本中的输入和输出" class="headerlink" title="python脚本中的输入和输出"></a>python脚本中的输入和输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul><li>输入是通过raw_input( )或input( )函数来实现的，input( )的一般格式为：<blockquote><p>x = input(“提示：”)</p></blockquote></li><li>该函数返回输入的对象。可输入数字、字符串和其他对象。</li><li>raw_input( )直接读取控制台的输入（任何类型的输入它艘都可以接收）。面对于input( )，它希望能够读取一个合法的python表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个SyntaxError。</li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li>输出是通过print语句来完成的，一般格式为：<ul><li>print 对象1，对象2…对象n</li><li>print (字符串常量或字符串变量)</li><li>print (“<em> %s</em>%s_”%(string1,string2,_stringn))</li><li>print (“<em> %d</em>%d_”%(整数1,整数2,整数n))</li><li>print (“<em> %x,</em>%o”%(255,255))</li></ul></li></ul><h3 id="python脚本中的输入和输出的例子"><a href="#python脚本中的输入和输出的例子" class="headerlink" title="python脚本中的输入和输出的例子"></a>python脚本中的输入和输出的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; raw_input_A = raw_input(&quot;raw_input:&quot;)</span><br><span class="line">raw_input:abc</span><br><span class="line">&gt;&gt;&gt; input_A = input(&quot;Input:&quot;)</span><br><span class="line">Input:abc</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#20&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    input_A = input(&quot;Input:&quot;)</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &apos;abc&apos; is not defined</span><br><span class="line">&gt;&gt;&gt; input_A = input(&quot;Input:&quot;)</span><br><span class="line">Input:&quot;abc&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print 300</span><br><span class="line">300</span><br><span class="line">&gt;&gt;&gt; print 100 + 200</span><br><span class="line">300</span><br><span class="line">&gt;&gt;&gt; print&apos;100 + 200 =&apos;,100 + 200</span><br><span class="line">100 + 200 = 300</span><br></pre></td></tr></table></figure><hr><h2 id="python程序的性能测试"><a href="#python程序的性能测试" class="headerlink" title="python程序的性能测试"></a>python程序的性能测试</h2><h3 id="内存占用测试"><a href="#内存占用测试" class="headerlink" title="内存占用测试"></a>内存占用测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from memory_profiler import profile</span><br><span class="line">@profile</span><br><span class="line">def ifPrime(n):</span><br><span class="line">    if n == 2:</span><br><span class="line">        return True</span><br><span class="line">    for i in range(2,int(n**0.5)+2):</span><br><span class="line">        if n%i == 0:</span><br><span class="line">            return False</span><br><span class="line">    return Ture</span><br><span class="line"></span><br><span class="line">isPrime(9999999999999999999)</span><br></pre></td></tr></table></figure><hr><h2 id="python的对象模型"><a href="#python的对象模型" class="headerlink" title="python的对象模型"></a>python的对象模型</h2><ul><li>计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。</li><li>在python中，一切事物都是对象，程序中存储的所有数据都是对象，对象基于类创建。</li><li><p>class 指自定义类型，type 指内置类型。</p></li><li><p>实例化：创建特定类型的对象，实例被创建后，其身份和类型不可改变。</p><ul><li>若对象值可修改，称为可变对象</li><li>若对象值不可修改，称之为不可变对象</li></ul></li><li>容器：某个对象包含对其他对象的引用，如：列表</li></ul><hr><h2 id="python数据类型"><a href="#python数据类型" class="headerlink" title="python数据类型"></a>python数据类型</h2><p><img src="https://user-images.githubusercontent.com/29295862/50722433-e6702d80-1109-11e9-9a06-30903c61346b.png" alt="Python数据类型"></p><h3 id="python数据类型的例子"><a href="#python数据类型的例子" class="headerlink" title="python数据类型的例子"></a>python数据类型的例子</h3><table><thead><tr><th>对象类型</th><th>例子</th></tr></thead><tbody><tr><td>数字</td><td>1234，3.14，3+4j</td></tr><tr><td>字符串</td><td>‘swfu’，”I’m student”，”Python”</td></tr><tr><td>日期</td><td>2012-08-25</td></tr><tr><td>列表</td><td>[1,2,3]</td></tr><tr><td>字典</td><td>{1:’food’,2:’taste’,3:’import’}</td></tr><tr><td>元组</td><td>(2,-5,6)</td></tr><tr><td>文件</td><td>f=open(‘data.dat’,’r’)</td></tr><tr><td>集合</td><td>set(‘abc’),{‘a’,’b’,’c’}</td></tr><tr><td>布尔型</td><td>True,False</td></tr><tr><td>空类型</td><td>None</td></tr><tr><td>编程单元类型</td><td>函数、模块、类</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="数字常量"><a href="#数字常量" class="headerlink" title="数字常量"></a>数字常量</h2><ul><li>浮点数又称小数，如15.0、0.37、-11.2、1.2e2、314.15e-2</li><li>复数是由实部和虚部构成的数，如3+4j、0.1-0.5j</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a=3+4j</span><br><span class="line">&gt;&gt;&gt; b=5+6j</span><br><span class="line">&gt;&gt;&gt; c=a+b</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">(8+10j)</span><br><span class="line">&gt;&gt;&gt; c.real  #复数的实部</span><br><span class="line">8.0</span><br><span class="line">&gt;&gt;&gt; c.imag  #复数的虚部</span><br><span class="line">10.0</span><br></pre></td></tr></table></figure><hr><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><ul><li>在计算机语言中表达两种相反的结果，把结果肯定的用“True”表示，把结果否定的用“False”来表示。</li><li>布尔类变量只有二种可能值：True或者False</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = 100&lt;101</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><ul><li>b是布尔类型变量，运行此段程序，将输出True</li></ul><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>用单引号或双引号括起来的符号系列称为字符串，如’abc’、’123’、’中国’、”Python”</li><li>空串表示为’’或””</li><li>转义字符可表示特殊字符，如’\n’是换行符、’\x41’、’\101’、’A’都表示字符A</li><li>三引号表示的字符串可以换行，因此可以用来表示超长字符串，或给程序加较长的注释。</li></ul><hr><h2 id="字符串的下标"><a href="#字符串的下标" class="headerlink" title="字符串的下标"></a>字符串的下标</h2><p>字符串中字符的位置从左到右以下标0开始，从右到左以下标-1开始。</p><table><thead><tr><th>S</th><th>T</th><th>F</th><th>D</th><th>E</th><th>N</th><th>O</th><th>X</th><th>Y</th><th>Z</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>-2</td><td>-1</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a=&quot;hello&quot;</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">&apos;h&apos;</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">&apos;o&apos;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h2><p>截取有两种方法：</p><ul><li>一种是索引 s[index]，取出一个字符；</li><li>另一种是切片 s[[start]:[end]]，取出多个字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = &apos;abcdef&apos;</span><br><span class="line">&gt;&gt;&gt; s[1:3]  #取出位置为1到位置为2的字符，不包括3</span><br><span class="line">&apos;bc&apos;</span><br><span class="line">&gt;&gt;&gt; s[:3]   #取出从头至位置2的字符</span><br><span class="line">&apos;abc&apos;</span><br><span class="line">&gt;&gt;&gt; s[4:]   #取出从位置4开始的所有字符</span><br><span class="line">&apos;ef&apos;</span><br><span class="line">&gt;&gt;&gt; s[:]    #取出全部字符</span><br><span class="line">&apos;abcdef&apos;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串的查找"><a href="#字符串的查找" class="headerlink" title="字符串的查找"></a>字符串的查找</h2><p>在字符串中查找一个子串，返回子串的位置，成功返回下标，失败返回-1</p><p>语法格式为：</p><blockquote><p>s.find(sub[,start][,end])</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = &apos;apple,peach,banana,peach,pear&apos;</span><br><span class="line">&gt;&gt;&gt; s.find(&apos;peach&apos;,7)</span><br><span class="line">19</span><br><span class="line">&gt;&gt;&gt; s.find(&apos;peach&apos;,7,20)</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><hr><h2 id="字符串的分割"><a href="#字符串的分割" class="headerlink" title="字符串的分割"></a>字符串的分割</h2><p>通过指定分隔符对字符串进行分割，返回分割后的字符串列表</p><p>语法格式为：</p><blockquote><p>str.split(str = “”,num = string.count(str))</p></blockquote><p>参数：</p><ul><li>str：分隔符，默认所有的空格符，包括空格、换行(\n)、制表符(\t)等</li><li>num：分割次数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = &apos;apple,peach,banana,pear&apos;</span><br><span class="line">&gt;&gt;&gt; li = s.split(&apos;,&apos;)</span><br><span class="line">&gt;&gt;&gt; li</span><br><span class="line">[&apos;apple&apos;, &apos;peach&apos;, &apos;banana&apos;, &apos;pear&apos;]</span><br></pre></td></tr></table></figure><hr><h2 id="字符串的连接"><a href="#字符串的连接" class="headerlink" title="字符串的连接"></a>字符串的连接</h2><p>将序列中的元素以制定的字符连接生成一个新的字符串</p><p>语法格式为：</p><blockquote><p>str.join(sequence)</p></blockquote><p>参数：要连接的元素列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; li = [&apos;apple&apos;,&apos;peach&apos;,&apos;banana&apos;,&apos;pear&apos;]</span><br><span class="line">&gt;&gt;&gt; sep = &apos;,&apos;</span><br><span class="line">&gt;&gt;&gt; s = sep.join(li)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&apos;apple,peach,banana,pear&apos;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串的转换小写字母"><a href="#字符串的转换小写字母" class="headerlink" title="字符串的转换小写字母"></a>字符串的转换小写字母</h2><p>转换字符串中所有大写字符为小写</p><p>语法格式为：</p><blockquote><p>str.lower( )</p></blockquote><p>参数：无</p><p>返回将字符串中所有大写字符转化为小写后生成的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s=&quot;What&apos;s Your Name?&quot;</span><br><span class="line">&gt;&gt;&gt; s2=s.lower()</span><br><span class="line">&gt;&gt;&gt; s2</span><br><span class="line">&quot;what&apos;s your name?&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串的替换"><a href="#字符串的替换" class="headerlink" title="字符串的替换"></a>字符串的替换</h2><p>把字符串中的old（旧字符串）替换成new（新字符串）</p><p>语法格式：</p><blockquote><p>str.replace(old,new[,max])</p></blockquote><p>参数：</p><ul><li>old：将被替换的子字符串</li><li>new：新字符串，用于替换old子字符串</li><li>max：可选字符串，替换不超过max次</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = &apos;hello world&apos;</span><br><span class="line">&gt;&gt;&gt; print s</span><br><span class="line">hello world</span><br><span class="line">&gt;&gt;&gt; s2 = s.replace(&apos;hello&apos;,&apos;hi&apos;)</span><br><span class="line">&gt;&gt;&gt; print s2</span><br><span class="line">hi world</span><br></pre></td></tr></table></figure><hr><h2 id="字符串两端删除字符"><a href="#字符串两端删除字符" class="headerlink" title="字符串两端删除字符"></a>字符串两端删除字符</h2><p>移除字符串头尾指定的字符（默认为空格）</p><p>语法格式为：</p><blockquote><p>str.strip([chars])</p></blockquote><p>参数：</p><ul><li>chars：移除字符串头尾指定的字符</li></ul><p>返回移除字符串头尾指定的字符生成的新字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = &apos;abc &apos;</span><br><span class="line">&gt;&gt;&gt; s2 = s.strip()</span><br><span class="line">&gt;&gt;&gt; s2</span><br><span class="line">&apos;abc&apos;</span><br></pre></td></tr></table></figure><hr><h2 id="字符串结束符判断"><a href="#字符串结束符判断" class="headerlink" title="字符串结束符判断"></a>字符串结束符判断</h2><p>判断字符串是否以指定后缀结尾，如果以指定后缀结尾，返回True，否则返回False</p><p>语法格式为：</p><blockquote><p>str.endswith(suffix[,start[,end]])</p></blockquote><p>参数：</p><ul><li>suffix：一个字符串或者是一个元素</li><li>start：字符串中的开始位置</li><li>end：字符中结束位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str=&quot;this is a car!!!&quot;</span><br><span class="line">&gt;&gt;&gt; suffix=&quot;car!!!&quot;</span><br><span class="line">&gt;&gt;&gt; print str.endswith(suffix)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; suffix=&quot;is&quot;</span><br><span class="line">&gt;&gt;&gt; print str.endswith(suffix,2,4)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; str=&quot;this is a car!!!&quot;</span><br><span class="line">&gt;&gt;&gt; print str.endswith(suffix,2,4)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><hr><h2 id="常用字符串处理函数"><a href="#常用字符串处理函数" class="headerlink" title="常用字符串处理函数"></a>常用字符串处理函数</h2><p>检测字符串是否由字母和数字组成</p><p>语法格式：</p><blockquote><p>str.isalnum( )</p></blockquote><p>参数：无</p><p>如果string至少有一个字符并且所有字符都是字母或数字则返回True，否则返回Flase</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str=&quot;time1125&quot;</span><br><span class="line">&gt;&gt;&gt; print str.isalnum()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; str=&quot;time1125!&quot;</span><br><span class="line">&gt;&gt;&gt; print str.isalnum()</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>string.count(str,beg=0,end=len(string))</td><td>返回str在string里面出现的次数</td></tr><tr><td>string.isdigit()</td><td>如果string只包含数字则返回True否则返回False</td></tr><tr><td>max(str)</td><td>返回字符串str中最大的字母</td></tr><tr><td>min(str)</td><td>返回字符串str中最小的字母</td></tr><tr><td>string.rfind(str,beg=0,end=len(string))</td><td>类似于find()函数，不过是从右边开始查找</td></tr><tr><td>string.rindex(str,beg=0,end=len(string))</td><td>类似于index()函数，不过是从右边开始查找</td></tr><tr><td>string.startswith(obj,beg=0,end=len(string))</td><td>返回字符串是否是以.obj开头，是则返回True，否则返回False。如果返回False和end指定值，则在指定范围内检查</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="字符串使用的案例"><a href="#字符串使用的案例" class="headerlink" title="字符串使用的案例"></a>字符串使用的案例</h2><h3 id="题目：用户输入数字，用逗号分隔，使用python编程求这些数字的和。"><a href="#题目：用户输入数字，用逗号分隔，使用python编程求这些数字的和。" class="headerlink" title="题目：用户输入数字，用逗号分隔，使用python编程求这些数字的和。"></a>题目：用户输入数字，用逗号分隔，使用python编程求这些数字的和。</h3><blockquote><p>分析：用户输入的数字个数是不确定的，可以当作一个字符串来处理。首先，分割数字串，然后，将子串转换成数字，最后，将数字求和。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s=raw_input(&apos;Input Numbers separated by comma: &apos;)</span><br><span class="line">li=s.split(&apos;,&apos;)</span><br><span class="line">print li</span><br><span class="line">sum=0</span><br><span class="line">for x in li:</span><br><span class="line">    sum=sum+float(x)</span><br><span class="line">print&apos;sum=&apos;,sum</span><br><span class="line"></span><br><span class="line">运行结果为：</span><br><span class="line">Input Numbers separated by comma: 23,2,5,12.3</span><br><span class="line">[&apos;23&apos;, &apos;2&apos;, &apos;5&apos;, &apos;12.3&apos;]</span><br><span class="line">sum= 42.3</span><br></pre></td></tr></table></figure><hr><h2 id="字符串转化为数字"><a href="#字符串转化为数字" class="headerlink" title="字符串转化为数字"></a>字符串转化为数字</h2><ul><li>将字符串转化为整数，语法如下：<blockquote><p>int(x [,base])，参数x是待转换的字符串，参数base为可选参数，指定转换后整数的进制，默认为10进制。</p></blockquote></li><li>将字符串转化为长整数，语法如下：<blockquote><p>long(x[,base])，参数的含义与int()函数相同。</p></blockquote></li><li>将字符串或数字转化为浮点数，语法如下：<blockquote><p>float(x)，参数x是待转换的字符串或数字。</p></blockquote></li><li>计算字符串中的有效python表达式，并返回结果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a=&quot;1&quot;</span><br><span class="line">&gt;&gt;&gt; b=int(a)+1</span><br><span class="line">&gt;&gt;&gt; print b</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; b=&quot;1+2&quot;</span><br><span class="line">&gt;&gt;&gt; print(eval(b))</span><br><span class="line">3</span><br></pre></td></tr></table></figure><hr><h2 id="转化为字符串"><a href="#转化为字符串" class="headerlink" title="转化为字符串"></a>转化为字符串</h2><ul><li>将数值转化为字符串，语法如下：<blockquote><p>str(x)，参数x是待转换的数值</p></blockquote></li><li>将对象转化为可打印字符串，语法如下：<blockquote><p>repr(obj)，参数obj是待转换的对象</p></blockquote></li><li>将一个整数转化为可对应ASCII的字符，语法如下：<blockquote><p>chr(整数)</p></blockquote></li><li>将一个字符转化为可对应ASCII的字符，语法如下：<blockquote><p>ord(字符)</p></blockquote></li><li>将一个整数转化为一个十六进制字符串，语法如下：<blockquote><p>chr(整数)</p></blockquote></li><li>将一个整数转化为一个八进制字符串，语法如下：<blockquote><p>oct(字符)</p></blockquote></li></ul><h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。与常量不同的是变量的值可以动态变化。</li><li>基于变量的数据类型，解释器会分配制定内存，并决定什么数据可以被存储在内存中。</li><li>变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</li></ul><hr><h2 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h2><ul><li>python的变量命名规则如下：<ul><li>标识符名字的第一个字符必须是字母或下划线(_)；</li><li>标识符名字的第一个字符后面可以由字母、下划线(_)或数字(0~9)组成；</li><li>标识符名字是区分大小写的。</li></ul></li></ul><hr><h2 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h2><ul><li>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</li><li>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</li><li>等号（=）用来给变量赋值。等号（=）运算符左边是一个变量名，等号（=）运算符右边是存储在变量中的值</li></ul><h3 id="变量的例子"><a href="#变量的例子" class="headerlink" title="变量的例子"></a>变量的例子</h3><p>定义了一个字符串变量a、数值变量b和布尔类型变量c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=&quot;This is a String&quot;</span><br><span class="line">b=2</span><br><span class="line">c=True</span><br></pre></td></tr></table></figure><hr><h3 id="多个变量的赋值"><a href="#多个变量的赋值" class="headerlink" title="多个变量的赋值"></a>多个变量的赋值</h3><ul><li>创建一个整形对象，值为1，三个变量被分配到相同的内存空间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a=b=c=1</span><br><span class="line">&gt;&gt;&gt; print a,b,c</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure><ul><li>两个整型对象1和2的分配给变量a和b，字符串对象“iohn”分配给变量c</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a,b,c=1,2,&quot;john&quot;</span><br><span class="line">&gt;&gt;&gt; print a,b,c</span><br><span class="line">1 2 john</span><br></pre></td></tr></table></figure><hr><h2 id="变量的引用"><a href="#变量的引用" class="headerlink" title="变量的引用"></a>变量的引用</h2><ul><li>引用：在python中从变量到对象的连接称为引用。</li></ul><p>变量拥有自己的存储空间，变量连接到对象是该变量存储了对象单元的内存地址，并没有存储对象的值。</p><hr><h2 id="变量的共享引用"><a href="#变量的共享引用" class="headerlink" title="变量的共享引用"></a>变量的共享引用</h2><p>共享引用是指多个变量引用同一个对象。下面的语句使两个变量都引用同一个对象3。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a=3</span><br><span class="line">&gt;&gt;&gt; b=a</span><br></pre></td></tr></table></figure></p><hr><h2 id="删除对象引用"><a href="#删除对象引用" class="headerlink" title="删除对象引用"></a>删除对象引用</h2><p>使用del语句删除对象的引用，语法格式为：</p><blockquote><p>del varl[,var2[,var3[…,varN]]]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a=5</span><br><span class="line">&gt;&gt;&gt; b=a</span><br><span class="line">&gt;&gt;&gt; print a,b</span><br><span class="line">5 5</span><br><span class="line">&gt;&gt;&gt; del b</span><br><span class="line">&gt;&gt;&gt; print a,b</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;pyshell#5&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    print a,b</span><br><span class="line">NameError: name &apos;b&apos; is not defined</span><br></pre></td></tr></table></figure><h2 id="—-1"><a href="#—-1" class="headerlink" title="—"></a>—</h2><h2 id="python的运算符"><a href="#python的运算符" class="headerlink" title="python的运算符"></a>python的运算符</h2><ul><li>运算符是可以操纵操作数值的结构。</li><li>运算符是程序设计语言的最基本元素，它是构成表达式的基础。</li><li>如在10+20=30中，10和20称为操作数，+称为运算符。</li></ul><hr><h2 id="python运算符的分类"><a href="#python运算符的分类" class="headerlink" title="python运算符的分类"></a>python运算符的分类</h2><ul><li>算数运算符</li><li>赋值运算符</li><li>位运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>字符串运算符</li><li>成员运算符</li><li>身份运算符</li></ul><hr><h2 id="python中的算数运算符"><a href="#python中的算数运算符" class="headerlink" title="python中的算数运算符"></a>python中的算数运算符</h2><table><thead><tr><th>算数运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>相加运算</td><td>1+2的结果是3</td></tr><tr><td>-</td><td>相减运算</td><td>100-1的结果是99</td></tr><tr><td>*</td><td>乘法运算</td><td>2*2的结果是4</td></tr><tr><td>/</td><td>除法运算</td><td>4/2的结果是2</td></tr><tr><td>%</td><td>求模运算</td><td>10%3的结果是1</td></tr><tr><td>**</td><td>幂运算，x**y返回x的y次幂</td><td>2**3的结果是8</td></tr><tr><td>//</td><td>整除运算，返回商的整数部分</td><td>9//2的结果是4</td></tr><tr><td></td><td></td></tr></tbody></table><hr><h2 id="python中的赋值运算符"><a href="#python中的赋值运算符" class="headerlink" title="python中的赋值运算符"></a>python中的赋值运算符</h2><table><thead><tr><th>赋值运算符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>x=3，将3赋值到变量x中</td></tr><tr><td>+=</td><td>加法赋值</td><td>x+=3，等同于x=x+3</td></tr><tr><td>-=</td><td>减法赋值</td><td>x-=3，等同于x=x-3</td></tr><tr><td>*=</td><td>乘法赋值</td><td>x<em>=3，等同于x=x</em>3</td></tr><tr><td>/=</td><td>除法赋值</td><td>x/=3，等同于x=x/3</td></tr><tr><td>%=</td><td>取模赋值</td><td>x%3，等同于x=x%3</td></tr><tr><td>**=</td><td>幂赋值</td><td>x<strong>=3，等同于x=x</strong>3</td></tr><tr><td>//=</td><td>整除赋值</td><td>x//=3，等同于x=x//3</td></tr><tr><td></td><td></td></tr></tbody></table><hr><h2 id="python中的位运算符"><a href="#python中的位运算符" class="headerlink" title="python中的位运算符"></a>python中的位运算符</h2><table><thead><tr><th>位运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算。相当于”*”；都是1则为1，否则为0</td></tr><tr><td>\</td><td></td><td>按位或运算。相当于”+”；都是0则为0，否则为1</td></tr><tr><td>^</td><td>按位异或运算。0^0=0;1^0=1;0^1=1;1^1=0</td></tr><tr><td>~</td><td>按位非运算</td></tr><tr><td>&lt;&lt;</td><td>位左移运算，即所有位左移</td></tr><tr><td>&gt;&gt;</td><td>位右移运算，即所有位向右移</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="python中的比较运算符"><a href="#python中的比较运算符" class="headerlink" title="python中的比较运算符"></a>python中的比较运算符</h2><table><thead><tr><th>比较运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于运算符。返回True或False</td></tr><tr><td>!=</td><td>不等运算符。返回True或False</td></tr><tr><td>&lt;&gt;</td><td>不等运算符，与!=相同</td></tr><tr><td>&lt;</td><td>小于运算符</td></tr><tr><td>&gt;</td><td>大于运算符</td></tr><tr><td>&lt;=</td><td>小于等于运算符</td></tr><tr><td>&gt;=</td><td>大于等于运算符</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="python中的逻辑运算符"><a href="#python中的逻辑运算符" class="headerlink" title="python中的逻辑运算符"></a>python中的逻辑运算符</h2><table><thead><tr><th>逻辑运算符</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>逻辑与运算符。例如：a and b，当a和b都为True时等于True；否则等于False</td></tr><tr><td>or</td><td>逻辑或运算符。例如：a or b，当a和b至少有一个为True时等于True；否则等于False</td></tr><tr><td>not</td><td>逻辑非运算符。例如：not a，当a等于True时，表达式等于False；否则等于True</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="python中的字符串运算符"><a href="#python中的字符串运算符" class="headerlink" title="python中的字符串运算符"></a>python中的字符串运算符</h2><table><thead><tr><th>字符串运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>字符串连接</td></tr><tr><td>*</td><td>重复输出字符串</td></tr><tr><td>[]</td><td>获取字符串中指出索引位置的字符，索引从0开始</td></tr><tr><td>[start,end]</td><td>截取字符串中的一部分，从索引位置start开始到end结束</td></tr><tr><td>in</td><td>成员运算符，如果字符串中包含给定的字符则返回True</td></tr><tr><td>not in</td><td>成员运算符，如果字符串中不包含给定的字符返回True</td></tr><tr><td>r或者R</td><td>指定原始字符串。原始字符串是指所有的字符串都是直接按照字面意思来使用，没有转义字符、特殊字符或不能打印的字符。原始字符串的第一个引号前加上字母“r”或“R”</td></tr><tr><td></td></tr></tbody></table><h3 id="python中的字符串运算符的例子"><a href="#python中的字符串运算符的例子" class="headerlink" title="python中的字符串运算符的例子"></a>python中的字符串运算符的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = &quot;hello&quot;;</span><br><span class="line">a = b + &quot;world!&quot;;</span><br><span class="line">print(a);</span><br><span class="line">print(a*2);</span><br><span class="line">print(r&quot;hello\nworld!&quot;);</span><br></pre></td></tr></table></figure><hr><h2 id="python中成员和身份运算符"><a href="#python中成员和身份运算符" class="headerlink" title="python中成员和身份运算符"></a>python中成员和身份运算符</h2><table><thead><tr><th>成员运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回True，否则返回False</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回True，否则返回False</td></tr><tr><td></td></tr></tbody></table><table><thead><tr><th>身份运算符</th><th>描述</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用自一个对象</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用自不同对象</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="python中的运算符优先级"><a href="#python中的运算符优先级" class="headerlink" title="python中的运算符优先级"></a>python中的运算符优先级</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数运算的优先级最高</td></tr><tr><td>~、+、-</td><td>逻辑非和正/负运算符。注意这里的“+”“-”不是加减运算符</td></tr><tr><td>*、/、%、//</td><td>乘、除、取模、取整除</td></tr><tr><td>+、-</td><td>加和减</td></tr><tr><td>&gt;&gt;、&lt;&lt;</td><td>位右移运算和左移运算</td></tr><tr><td>&amp;</td><td>按位与运算</td></tr><tr><td>^、\</td><td></td><td>按位异或和按位或运算</td></tr><tr><td>&gt;、==、!=</td><td>大于、等于、不等于</td></tr><tr><td>%=、/=、//=、-=、+=、<em>=、*</em>=</td><td>赋值运算符</td></tr><tr><td>is、is not</td><td>身份运算符</td></tr><tr><td>in、not in</td><td>成员运算符</td></tr><tr><td>not、or、and</td><td>逻辑运算符</td></tr><tr><td></td></tr></tbody></table><h2 id="—-2"><a href="#—-2" class="headerlink" title="—"></a>—</h2><h2 id="python中的表达式的分类"><a href="#python中的表达式的分类" class="headerlink" title="python中的表达式的分类"></a>python中的表达式的分类</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>x+y、x-y</td><td>加法减法</td></tr><tr><td>x*y、x/y、x//y、x%y</td><td>乘法/重复，除法，求整商，余数/格式化</td></tr><tr><td>x**y</td><td>幂运算</td></tr><tr><td>x&lt;y、x&lt;=y、x&gt;y、x&gt;=y</td><td>大小比较，集合的包含关系比较</td></tr><tr><td>x==y、x!=y</td><td>相等比较，不等比较</td></tr><tr><td>x or y</td><td>逻辑或（只有x为假才会计算）</td></tr><tr><td>x and y</td><td>逻辑与（只有x为真才会计算）</td></tr><tr><td>not x</td><td>逻辑非</td></tr><tr><td>x in y、x not in y</td><td>成员与集合的关系</td></tr><tr><td>x is y、x is not y</td><td>对象实体测试</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="python中的逻辑组合表达式"><a href="#python中的逻辑组合表达式" class="headerlink" title="python中的逻辑组合表达式"></a>python中的逻辑组合表达式</h2><h3 id="成绩score在90-100或者50-60之间"><a href="#成绩score在90-100或者50-60之间" class="headerlink" title="成绩score在90~100或者50~60之间"></a>成绩score在90~100或者50~60之间</h3><blockquote><p>90 &lt;= score &lt;= 100 or 50 &lt;= score &lt;= 60</p></blockquote><h2 id="—-3"><a href="#—-3" class="headerlink" title="—"></a>—</h2><h2 id="python中的语句"><a href="#python中的语句" class="headerlink" title="python中的语句"></a>python中的语句</h2><ul><li>语句是一段可执行代码，不一定有返回值。</li><li>语句块是一组语句：<ul><li>通过放置空格来缩进语句创建语句块，语句块中的每一行必须是同样的缩进量。</li><li>Python语言利用缩进表示语句块的开始和退出（Off-side规则），而非使用花括号或者某种关键字。</li><li>增加缩进表示语句块的开始，而减少缩进则表示语句块的推出。</li></ul></li></ul><hr><h2 id="python中的赋值语句"><a href="#python中的赋值语句" class="headerlink" title="python中的赋值语句"></a>python中的赋值语句</h2><ul><li>赋值语句是python中最简单、最常用的语句。</li><li>通过赋值语句可以定义变量并为其赋初始值。</li><li>Python中创建一个变量，不需要声明其类型。</li></ul><hr><h2 id="python中的序列赋值语句"><a href="#python中的序列赋值语句" class="headerlink" title="python中的序列赋值语句"></a>python中的序列赋值语句</h2><p>可以把赋值运算符右侧的一系列值，依次赋给左侧的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a,b=4,5</span><br><span class="line">print(a,b)</span><br><span class="line">a,b=(6,7)</span><br><span class="line">print(a,b)</span><br><span class="line">a,b=&quot;AB&quot;</span><br><span class="line">print(a,b)</span><br><span class="line">((a,b),c)=(&apos;AB&apos;,&apos;CD&apos;)   #嵌套序列赋值</span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">(4, 5)</span><br><span class="line">(6, 7)</span><br><span class="line">(&apos;A&apos;, &apos;B&apos;)</span><br><span class="line">(&apos;A&apos;, &apos;B&apos;, &apos;CD&apos;)</span><br></pre></td></tr></table></figure><hr><h2 id="python中的扩展序列赋值语句"><a href="#python中的扩展序列赋值语句" class="headerlink" title="python中的扩展序列赋值语句"></a>python中的扩展序列赋值语句</h2><p>在序列赋值中，赋值运算符左侧的变量个数和右侧值的个数总是相等的。如果不相等，Python就报错。Python中使用带有星号的名称，如*j，实现了扩展序列赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i,*j=range(3)</span><br><span class="line">print(i,j)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">0,[1,2]</span><br></pre></td></tr></table></figure><hr><h2 id="python中的增强赋值语句"><a href="#python中的增强赋值语句" class="headerlink" title="python中的增强赋值语句"></a>python中的增强赋值语句</h2><p>增强赋值语句是从C语言借鉴而来，实质上是基本赋值语句的简写。通常来说，增强赋值语句的运行会更快一些。将变量x增加y赋给变量x，基本赋值语句为：</p><blockquote><p>x = x+y</p></blockquote><p>增强赋值语句则为：</p><blockquote><p>x+=y</p></blockquote><p>相应的，还有：+=、*=、-=等</p><hr><h2 id="python中的条件语句"><a href="#python中的条件语句" class="headerlink" title="python中的条件语句"></a>python中的条件语句</h2><p>条件语句是根据条件表达式的值是True/非零还是False/零做出决策，控制代码块的执行。</p><hr><h2 id="python中的条件语句中的逻辑判断类型"><a href="#python中的条件语句中的逻辑判断类型" class="headerlink" title="python中的条件语句中的逻辑判断类型"></a>python中的条件语句中的逻辑判断类型</h2><ul><li>两个对象之间的关系：==、!=、&lt;、&gt;、&gt;=、&lt;=</li></ul><p>注：!=还可以表示成：&lt;&gt;</p><ul><li>成员测试：in、not in</li></ul><hr><h2 id="python中的断言语句"><a href="#python中的断言语句" class="headerlink" title="python中的断言语句"></a>python中的断言语句</h2><ul><li>在没完善一个程序之前，不知道程序在哪里会出错，与其让它在运行时崩溃，不如在出现错误条件时就崩溃，这时候就需要assert断言语句。</li><li>断言语句的语法是：<blockquote><p>assert expression[,reason]</p></blockquote></li><li>当判断表达式expression为真时，什么都不做；如果表达式为假，则抛出异常。</li><li>assert语句一般用于开发程序时对特定必须满足的条件进行验证，仅当<em>debug</em>为True时有效。当Python脚本以-o选项编译为字节码文件时，assert语句将被移除以提高运行速度。</li></ul><hr><h2 id="python中的上下文管理语句"><a href="#python中的上下文管理语句" class="headerlink" title="python中的上下文管理语句"></a>python中的上下文管理语句</h2><ul><li>使用with自动关闭资源，可以在代码块执行完毕后还原进入该代码块时的现场。</li><li>无论何种原因跳出with块，无论是否发生异常，总能保证文件被正确关闭，资源被正确释放。</li><li>with语句的语法如下：<blockquote><p>with context_expr[as var]:  with块</p></blockquote></li></ul><hr><h2 id="python中的异常语句"><a href="#python中的异常语句" class="headerlink" title="python中的异常语句"></a>python中的异常语句</h2><ul><li>当python检测到一个错误时，解释器就会指出当前流已无法继续执行下去，这时候就出现了异常。异常是指因为程序出错而在正常控制流以外采取的行为。</li><li>异常分为两个阶段：第一阶段是引起异常发生的错误；第二阶段是检测并处理阶段。</li></ul><hr><h2 id="python中的内置异常"><a href="#python中的内置异常" class="headerlink" title="python中的内置异常"></a>python中的内置异常</h2><table><thead><tr><th>异常类名</th><th>描述</th></tr></thead><tbody><tr><td>Exception</td><td>所有异常的基类</td></tr><tr><td>NameError</td><td>尝试访问一个没有声明的变量</td></tr><tr><td>ZeroDivisionError</td><td>除数为0</td></tr><tr><td>SyntaxError</td><td>语法错误</td></tr><tr><td>IndexError</td><td>索引超出序列范围</td></tr><tr><td>KeyError</td><td>请求一个不存在的字典关键字</td></tr><tr><td>IOError</td><td>输入输出错误（比如你要读的文件不存在）</td></tr><tr><td>AttributeError</td><td>尝试访问未知的对象属性</td></tr><tr><td>ValueError</td><td>传给函数的参数类型不正确</td></tr><tr><td>EOFError</td><td>发现一个不期望的</td></tr><tr><td></td></tr></tbody></table><hr><h2 id="python中的捕获异常"><a href="#python中的捕获异常" class="headerlink" title="python中的捕获异常"></a>python中的捕获异常</h2><ul><li>try子句中的代码块放置可能出现异常的语句，except子句中的代码块处理异常。</li></ul><h3 id="捕获异常的例子"><a href="#捕获异常的例子" class="headerlink" title="捕获异常的例子"></a>捕获异常的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a_list=[&apos;China&apos;,&apos;America&apos;,&apos;England&apos;,&apos;France&apos;]</span><br><span class="line">&gt;&gt;&gt; try:</span><br><span class="line">  print a_list[4]</span><br><span class="line">except IndexError:</span><br><span class="line">  print&apos;列表元素的下标越界&apos;</span><br><span class="line"></span><br><span class="line">运行结果是：</span><br><span class="line">列表元素的下标越界</span><br></pre></td></tr></table></figure><blockquote><p>引入循环结构，可以实现重复输入字符串序号，直到检测序号不越界而输出相应的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a_list=[&apos;Chian&apos;,&apos;America&apos;,&apos;England&apos;,&apos;France&apos;]</span><br><span class="line">print&apos;请输入字符串的序号&apos;</span><br><span class="line">while True:</span><br><span class="line">    n=input()</span><br><span class="line">    try:</span><br><span class="line">        print a_list[n]</span><br><span class="line">    except IndexError:</span><br><span class="line">        print&apos;列表元素的下标越界，请重新输入字符串的序号&apos;</span><br><span class="line">    else:</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">请输入字符串的序号</span><br><span class="line">1</span><br><span class="line">America</span><br></pre></td></tr></table></figure></p></blockquote><hr><h2 id="python中的捕获所有异常"><a href="#python中的捕获所有异常" class="headerlink" title="python中的捕获所有异常"></a>python中的捕获所有异常</h2><p>任何情况下都需要执行的语法格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    ...</span><br><span class="line">finally:</span><br><span class="line">    ...   #无论如何都会执行</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python学习笔记1</title>
      <link>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link>
      <guid>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid>
      <pubDate>Sat, 05 Jan 2019 08:29:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;1-比较重要的点&quot;&gt;&lt;a href=&quot;#1-比较重要的点&quot; class=&quot;headerlink&quot; title=&quot;1. 比较重要的点&quot;&gt;&lt;/a&gt;1. 比较重要的点&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基本语法&lt;/li&gt;
&lt;li&gt;掌握爬虫&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ul
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="1-比较重要的点"><a href="#1-比较重要的点" class="headerlink" title="1. 比较重要的点"></a>1. 比较重要的点</h1><ol><li>基本语法</li><li>掌握爬虫</li></ol><hr><ul><li><p>编译性语言写的程序需要从源文件转换到二进制代码，这个过程通过编译器完成。计算机可以直接以机器语言来运行程序，速度快。</p></li><li><p>解释型语言：</p></li><li><p>强数据类型的语言：</p></li><li><p>弱数据类型</p></li><li><p>python与C语言</p></li><li><p>python与Java语言</p></li></ul><hr><ul><li>python的发展历史</li><li>编程语言排行</li></ul><hr><h2 id="python的特点："><a href="#python的特点：" class="headerlink" title="python的特点："></a>python的特点：</h2><ul><li>简单易学</li><li>开源免费</li><li>高级语言，解释型语言</li><li>可移植性高。。。</li></ul><hr><h2 id="python可以做什么"><a href="#python可以做什么" class="headerlink" title="python可以做什么"></a>python可以做什么</h2><ul><li>网络编程：python包含标准。。。</li><li>数据库编程：支持主流数据库。。。</li><li>数据分析：NumPy扩展。。。</li><li>人工智能：PyRO进行机器控制。。。</li><li>游戏开发：</li></ul><hr><h2 id="python应用"><a href="#python应用" class="headerlink" title="python应用"></a>python应用</h2><hr><h2 id="python成为人工智能的首选语言"><a href="#python成为人工智能的首选语言" class="headerlink" title="python成为人工智能的首选语言"></a>python成为人工智能的首选语言</h2><ul><li>python已经是数据分析和人工智能的第一语言，网络攻防的第一黑客语言，正在成为编程入门教学的第一语言，云计算系统管理第一语言。</li></ul><hr><h2 id="python开发版本的选择"><a href="#python开发版本的选择" class="headerlink" title="python开发版本的选择"></a>python开发版本的选择</h2><ul><li>2.7.x</li></ul>]]></content:encoded>
      
      <comments>https://DOOKNET.github.io/2019/01/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Markdown手册</title>
      <link>https://DOOKNET.github.io/2018/08/29/%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/Markdown%E6%89%8B%E5%86%8C/</link>
      <guid>https://DOOKNET.github.io/2018/08/29/%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/Markdown%E6%89%8B%E5%86%8C/</guid>
      <pubDate>Wed, 29 Aug 2018 09:41:34 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Markdown扩展安装：&quot;&gt;&lt;a href=&quot;#Markdown扩展安装：&quot; class=&quot;headerlink&quot; title=&quot;Markdown扩展安装：&quot;&gt;&lt;/a&gt;Markdown扩展安装：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;markdownlint
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Markdown扩展安装："><a href="#Markdown扩展安装：" class="headerlink" title="Markdown扩展安装："></a>Markdown扩展安装：</h1><ul><li><h2 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h2></li></ul><blockquote><p>用于检查markdown样式是否规范，如果不符合规范会有相应提示。</p></blockquote><ul><li><h2 id="Markdown-PDF"><a href="#Markdown-PDF" class="headerlink" title="Markdown PDF"></a>Markdown PDF</h2></li></ul><blockquote><p>用于将Markdown文档打印成PDF。只需要在编辑时点击任意位置右键选择相应的打印选项即可。</p></blockquote><ul><li><h2 id="Markdown-Table-Prettifier"><a href="#Markdown-Table-Prettifier" class="headerlink" title="Markdown Table Prettifier"></a>Markdown Table Prettifier</h2></li></ul><blockquote><p>用于将表格排列整齐。在编辑的表格处右键，选择“格式化文件”即可将表格排列整齐。</p></blockquote><ul><li><h2 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a>Markdown All in One</h2></li></ul><blockquote><p>集成多种功能于一体，可以替代上面几种扩展。</p></blockquote><h1 id="Markdown基本语法："><a href="#Markdown基本语法：" class="headerlink" title="Markdown基本语法："></a>Markdown基本语法：</h1><ul><li><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2></li></ul><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure></p><ul><li><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2></li></ul><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用的内容</span><br></pre></td></tr></table></figure></p><ul><li><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2></li></ul><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">三个&quot;`&quot;</span><br><span class="line">代码段</span><br><span class="line">三个&quot;`&quot;</span><br></pre></td></tr></table></figure></p><ul><li><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2></li></ul><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|</span><br><span class="line">|--- |---|</span><br><span class="line">|内容|内容|</span><br></pre></td></tr></table></figure></p><ul><li><h2 id="插入网页链接"><a href="#插入网页链接" class="headerlink" title="插入网页链接"></a>插入网页链接</h2></li></ul><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[网站名称](网址)</span><br></pre></td></tr></table></figure></p><ul><li><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2></li></ul><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片链接)</span><br></pre></td></tr></table></figure></p><h1 id="Markdown编辑公式："><a href="#Markdown编辑公式：" class="headerlink" title="Markdown编辑公式："></a>Markdown编辑公式：</h1><p>没有安装“Markdown All in One”这个扩展时，需要先在文件中添加以下代码才能显示出公式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://DOOKNET.github.io/2018/08/29/%E5%BA%94%E7%94%A8%E7%AC%94%E8%AE%B0/Markdown%E6%89%8B%E5%86%8C/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
